{"version":3,"sources":["App.js","reportWebVitals.js","GameSetup.js","index.js"],"names":["App","navigate","useNavigate","_useSearchParams","useSearchParams","serachParams","Object","slicedToArray","_useState","useState","get","gridSize","_useState3","_useState4","gameGrid","setGameGrid","_useState5","_useState6","openGameGrid","setOpenGameGrid","_useState7","_useState8","previousCardClicked","setPreviousCardClicked","_useState9","_useState10","hasWon","setHasWon","shuffleArray","array","i","length","j","Math","floor","random","temp","useEffect","baseGrid","Array","from","_","idx","concat","toConsumableArray","tempGrid","index","push","splice","p","falseArray","fill","react_default","a","createElement","className","Fragment","react_confetti_min_default","onClick","map","undefined","row","rowIndex","key","number","colIndex","onMouseDownCapture","newOpenGameGrid","setTimeout","flat","every","ele","handleCardClick","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","GameSetup","_useState2","setGridSize","invalidGridSize","setInvalidGridSize","onSizeSelect","currentTarget","value","type","id","name","checked","onChange","htmlFor","currentValue","onGridSizeSelect","console","log","document","getElementById","router","createBrowserRouter","path","element","src_GameSetup","src_App_0","ReactDOM","createRoot","render","StrictMode","react_router_dist"],"mappings":"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","file":"static/js/main.682a0107.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { useNavigate } from 'react-router-dom';\nimport Confetti from 'react-confetti';\nimport './App.css';\n\nconst App = () => {\n  const navigate = useNavigate();\n\n  const [serachParams] = useSearchParams();\n  const [gridSize] = useState(serachParams.get('size') || '4');\n  const [gameGrid, setGameGrid] = useState([[]]);\n\n  const [openGameGrid, setOpenGameGrid] = useState([[]]);\n  const [previousCardClicked, setPreviousCardClicked] = useState({});\n  const [hasWon, setHasWon] = useState(false);\n\n  /* Randomize array in-place using Durstenfeld shuffle algorithm */\n  function shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n\n  function handleCardClick(rowIndex, colIndex) {\n    if (!openGameGrid[rowIndex][colIndex]) {\n      if (previousCardClicked.rowIndex === undefined) {\n        // first click\n        setPreviousCardClicked({\n          rowIndex,\n          colIndex,\n        });\n        const newOpenGameGrid = [...openGameGrid];\n        newOpenGameGrid[rowIndex][colIndex] = true;\n        setOpenGameGrid(newOpenGameGrid);\n      } else if (\n        gameGrid[previousCardClicked.rowIndex][previousCardClicked.colIndex] ===\n        gameGrid[rowIndex][colIndex]\n      ) {\n        // cards match\n        const newOpenGameGrid = [...openGameGrid];\n        newOpenGameGrid[rowIndex][colIndex] = true;\n        setOpenGameGrid(newOpenGameGrid);\n        setPreviousCardClicked({});\n      } else {\n        // cards do not match\n        const newOpenGameGrid = [...openGameGrid];\n        newOpenGameGrid[rowIndex][colIndex] = true;\n        setOpenGameGrid(newOpenGameGrid);\n        setTimeout(() => {\n          newOpenGameGrid[rowIndex][colIndex] = false;\n          newOpenGameGrid[previousCardClicked.rowIndex][\n            previousCardClicked.colIndex\n          ] = false;\n          setOpenGameGrid(newOpenGameGrid);\n          setPreviousCardClicked({});\n        }, 350);\n      }\n\n      const allMatched = openGameGrid.flat().every((ele) => ele);\n      if (allMatched) {\n        setHasWon(true);\n      }\n    }\n  }\n\n  function handleReplayClick() {\n    setHasWon(false);\n    setPreviousCardClicked({});\n    shuffleArray(gameGrid);\n    setOpenGameGrid(\n      new Array(gameGrid.length)\n        .fill('')\n        .map(() => new Array(gameGrid[0].length).fill(false)),\n    );\n  }\n\n  function handleGoToHomeClick() {\n    navigate('/');\n  }\n\n  useEffect(() => {\n    let baseGrid = Array.from(\n      { length: (gridSize * gridSize) / 2 },\n      (_, idx) => `${++idx}`,\n    );\n    baseGrid = [...baseGrid, ...baseGrid];\n\n    shuffleArray(baseGrid);\n\n    let tempGrid = [];\n    for (let index = 0; index < gridSize; index++) {\n      tempGrid.push(baseGrid.splice(0, gridSize));\n    }\n\n    setGameGrid((p) => {\n      p = tempGrid;\n      return p;\n    });\n\n    setOpenGameGrid((p) => {\n      let falseArray = new Array(gridSize).fill('');\n      // console.log('grid size', gridSize, falseArray);\n      for (let index = 0; index < gridSize; index++) {\n        let tempGrid = new Array(gridSize).fill(false);\n        // console.log('temp grid', tempGrid);\n        falseArray[index] = [...tempGrid];\n      }\n      p = falseArray;\n      // console.log('false array', falseArray);\n      return p;\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"won\">\n        {hasWon && (\n          <>\n            <h1>You Won!</h1>\n            <Confetti />\n            <button onClick={handleReplayClick} className=\"button\">\n              Replay\n            </button>\n            <button onClick={handleGoToHomeClick} className=\"button\">\n              Go to Home\n            </button>\n          </>\n        )}\n      </div>\n      {gameGrid === undefined && openGameGrid === undefined ? (\n        <div>Loading ....</div>\n      ) : (\n        <>\n          {gameGrid.map((row, rowIndex) => (\n            <div key={rowIndex} className=\"row\">\n              {row.map((number, colIndex) => (\n                <div\n                  key={colIndex}\n                  className={`card ${\n                    openGameGrid[rowIndex][colIndex] ? 'revealed' : ''\n                  }`}\n                  onMouseDownCapture={() => handleCardClick(rowIndex, colIndex)}\n                >\n                  {openGameGrid[rowIndex][colIndex] ? number : ''}\n                </div>\n              ))}\n            </div>\n          ))}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { useNavigate } from 'react-router-dom';\n\nfunction GameSetup() {\n  const navigate = useNavigate();\n  const [gridSize, setGridSize] = useState('2');\n  const [invalidGridSize, setInvalidGridSize] = useState(false);\n\n  function onSizeSelect(e) {\n    setGridSize(e.currentTarget.value);\n  }\n\n  function onPlayClick() {\n    console.log('are we here??');\n    if (gridSize === '') {\n      console.log(document.getElementById('custom'));\n      console.log(document.getElementById('custom').value);\n    } else {\n      navigate(`/game?size=${gridSize}`);\n    }\n  }\n\n  function onGridSizeSelect(e) {\n    const currentValue = e.currentTarget.value;\n    if (currentValue % 2 === 0) {\n      setInvalidGridSize(false);\n    } else {\n      setInvalidGridSize(true);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"gameTitle\">\n        <span className=\"gameTitle__letter\">M</span>\n        <span className=\"gameTitle__letter gameTitle__letterRotate\">A</span>\n        <span className=\"gameTitle__letter\">T</span>\n        <span className=\"gameTitle__letter gameTitle__letterRotate\">C</span>\n        <span className=\"gameTitle__letter\">H</span>\n        <span className=\"gameTitle__letter\"> - </span>\n        <span className=\"gameTitle__letter gameTitle__letterRotate\">C</span>\n        <span className=\"gameTitle__letter gameTitle__letterRotate\">A</span>\n        <span className=\"gameTitle__letter\">R</span>\n        <span className=\"gameTitle__letter\">D</span>\n        <span className=\"gameTitle__letter\">S</span>\n      </div>\n      <fieldset>\n        <legend>Choose Grid Size:</legend>\n        <div className=\"grid-option\">\n          <input\n            type=\"radio\"\n            id=\"2x2\"\n            name=\"size\"\n            value=\"2\"\n            checked={gridSize === '2'}\n            onChange={(e) => onSizeSelect(e)}\n          />\n          <label htmlFor=\"2x2\">2x2</label>\n        </div>\n        <div className=\"grid-option\">\n          <input\n            type=\"radio\"\n            id=\"4x4\"\n            name=\"size\"\n            value=\"4\"\n            checked={gridSize === '4'}\n            onChange={(e) => onSizeSelect(e)}\n          />\n          <label htmlFor=\"4x4\">4x4</label>\n        </div>\n        <div className=\"grid-option\">\n          <input\n            type=\"radio\"\n            id=\"6x6\"\n            name=\"size\"\n            value=\"6\"\n            checked={gridSize === '6'}\n            onChange={(e) => onSizeSelect(e)}\n          />\n          <label htmlFor=\"6x6\">6x6</label>\n        </div>\n        <div className=\"grid-option\">\n          <input\n            type=\"radio\"\n            id=\"custom\"\n            name=\"size\"\n            value=\"\"\n            checked={gridSize === ''}\n            onChange={(e) => onSizeSelect(e)}\n          />\n          <label htmlFor=\"custom\">custom</label>\n          <input\n            type=\"number\"\n            id=\"custom\"\n            onChange={(e) => onGridSizeSelect(e)}\n          />\n          <span className={`error ${invalidGridSize ? 'visible' : ''}`}>\n            Grid can be only even numbers!\n          </span>\n        </div>\n        <button onClick={onPlayClick}>Play</button>\n      </fieldset>\n    </div>\n  );\n}\n\nexport default GameSetup;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport {\n  createBrowserRouter,\n  RouterProvider\n} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport GameSetup from './GameSetup';\n\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: <GameSetup />\n  },\n  {\n    path: '/game',\n    element: <App />\n  }\n])\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}